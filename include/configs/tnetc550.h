/*
 * tnetc550.h
 * Description:
 * TNETC550 Puma5 SoC EVM/EMU Config file.
 *
 *
 * Copyright (C) 2008, Texas Instruments, Incorporated
 *
 *  This program is free software; you can distribute it and/or modify it
 *  under the terms of the GNU General Public License (Version 2) as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
 */

#ifndef __CONFIG_H
#define __CONFIG_H

#ifndef __ASSEMBLY__
extern unsigned int CFG_FLASH_SECT_SIZE[];
extern unsigned int CFG_UBOOT_SECT_SIZE;
extern unsigned int CFG_FLASH_SECT_RESRV[];
extern unsigned int DETECTED_SFL_DEVICES;
#endif

#include <puma.h>

/*
 * Either of these defines come from top level config.h (autogenerated)
 *      #define CONFIG_PUMA5_VOLCANO_EMU
 *      #define CONFIG_PUMA5_QT_EMU
 */

#define CONFIG_TNETC550

#define CONFIG_RELOCATE_VEC_BASE

#define CONFIG_IDENT_STRING  "Puma5 - "CONFIG_IDENT_STRING_PUMA

/* Enable this to boost SPI clock to 80MHz on supporting devices */
/* #define CONFIG_ENABLE_SPI_CLOCK_BOOST */

/**
 * U-boot generic defines
 */
#undef CONFIG_USE_IRQ
#undef CONFIG_NET_MULTI
#undef CONFIG_NET_RETRY_COUNT

/*
 * Size of malloc() pool
 */
#define CFG_ENV_SIZE_MAX    0x40000 /* Maximum environment size */
#define CFG_MALLOC_LEN      (CFG_ENV_SIZE_MAX + 128*1024)
#define CFG_GBL_DATA_SIZE       128     /* size in bytes reserved for initial data */

/* allow to overwrite serial and ethaddr */
/*#define CONFIG_ENV_OVERWRITE
*/

/* Monitor commands support:
 *      CFG_CMD_LOADB   = load binary file over serial line (kermit mode)
 *      CFG_CMD_NET     = tftp load
 *      CFG_CMD_MEMORY  = memory dump/modify
 *      CFG_CMD_ENV     = set/print environment
 *      CFG_CMD_FLASH   = flash erase/info/lock
 */

#ifdef CONFIG_PUMA5_QT_EMU
#define CONFIG_NOETH
#define CFG_NO_FLASH
#endif

#if defined CONFIG_NOETH && defined CFG_NO_FLASH
#define CONFIG_COMMANDS         ((CONFIG_CMD_DFL) & ~(CFG_CMD_NFS) & ~(CFG_CMD_NET) & ~(CFG_CMD_FLASH) & ~(CFG_CMD_IMLS))
#elif defined CONFIG_NOETH
#define CONFIG_COMMANDS         ((CONFIG_CMD_DFL) & ~(CFG_CMD_NFS) & ~(CFG_CMD_NET))
#elif defined CFG_NO_FLASH
#define CONFIG_COMMANDS         ((CONFIG_CMD_DFL) & ~(CFG_CMD_NFS) & ~(CFG_CMD_FLASH) & ~(CFG_CMD_IMLS))
#else
#define CONFIG_COMMANDS         ((CONFIG_CMD_DFL) & ~(CFG_CMD_NFS))
#endif


#define CONFIG_CMDLINE_TAG         1         /* enable passing of ATAGs  */
#define CONFIG_SETUP_MEMORY_TAGS   1


/* This must be included AFTER the definition of CONFIG_COMMANDS (if any) */
/* These are u-boot generic parameters */
#include <cmd_confdefs.h>

#define CONFIG_ENV_OVERWRITE
#define CONFIG_BOOTDELAY        3                       /* set -1 for no autoboot */
#define CONFIG_VERSION_VARIABLE

/* Only interrupt boot if space is pressed */
/* If no serial cable is connected, garbage will be read */
#define CONFIG_AUTOBOOT_KEYED 1
#define CONFIG_AUTOBOOT_PROMPT "Press SPACE to abort autoboot in %d second(s)\n"
#define CONFIG_AUTOBOOT_STOP_STR " "

/*#define CONFIG_ETHADDR        08:00:3e:26:0a:5b*/
#define CONFIG_NETMASK          255.255.255.0
#define CONFIG_IPADDR           192.168.100.1
#define CONFIG_SERVERIP         192.168.100.2
#define CONFIG_GATEWAYIP        192.168.100.2
#define CONFIG_BOOTCOMMAND                                                  \
    "while itest.b 1 == 1;"  \
    "do;"   \
    "if itest.b ${ACTIMAGE} == 1 || itest.b ${ACTIMAGE} == 3;"  \
    "then "  \
        "aimgname=UBFI1; aubfiaddr=${UBFIADDR1};"   \
        "bimgname=UBFI2; bubfiaddr=${UBFIADDR2}; bimgnum=2;"    \
    "else "  \
        "if itest.b ${ACTIMAGE} == 2;"  \
        "then "  \
            "aimgname=UBFI2; aubfiaddr=${UBFIADDR2};"   \
            "bimgname=UBFI1; bubfiaddr=${UBFIADDR1}; bimgnum=1;"    \
        "else "  \
            "echo *** ACTIMAGE invalid; exit;"  \
        "fi;"   \
    "fi;"   \
    "if itest.b ${ACTIMAGE} == 3;"  \
    "then "  \
        "eval *0x80000000 - ${UBFI3RAMRESERVE};" \
        "eval 0x80000000 + ${evalval};" \
        "ramimgaddr=${evalval};" \
        "if autoscr ${ramimgaddr};"    \
        "then "  \
            "bootm ${LOADADDR};"   \
        "else " \
            "echo Reloading RAM image;" \
            "tftpboot ${ramimgaddr} ${UBFINAME3};" \
            "if autoscr ${ramimgaddr};"    \
            "then "  \
                "bootm ${LOADADDR};"   \
            "else " \
                "setenv ACTIMAGE 1;" \
            "fi;"   \
        "fi;"   \
    "fi; "  \
    "echo *** ACTIMAGE = ${ACTIMAGE}, will try to boot $aimgname stored @${aubfiaddr};"   \
    "if autoscr $aubfiaddr;"    \
       "then "  \
        "echo *** $aimgname bootscript executed successfully.;"  \
        "echo Start booting...;"  \
        "bootm ${LOADADDR};"   \
    "fi;"   \
    "echo *** $aimgname is corrupted, try $bimgname...;"    \
    "setenv ACTIMAGE $bimgnum;" \
    "if autoscr $bubfiaddr;"    \
        "then "  \
        "echo *** $bimgname bootscript executed successfully.;" \
        "echo Check image...;"  \
        "if imi ${LOADADDR};"  \
            "then " \
            "echo Save updated ACTIMAGE...;"  \
            "saveenv;"  \
            "echo Image OK, start booting...;"  \
            "bootm ${LOADADDR};"   \
        "fi;"   \
    "fi;"   \
    "echo Backup image also corrupted...exit.;" \
    "exit;" \
    "done;"


#undef CONFIG_BOOTARGS


/* Put the tftp downloaded data directly in the flash (for loadraddress in
 * flash)
 *
 * XXX - Currently undefining since the logic in tftp.c->store_block() assumes
 * FLASH_START > RAM_LOC to determine whether the write addr is in FLASH thus
 * results in flash_write errors when RAM_LOC > FLASH_SPACE and writing to RAM.
 */
/* #define CFG_DIRECT_FLASH_TFTP */

#if !defined CFG_NO_FLASH && !defined CONFIG_SPI_FLASH
#define CFG_FLASH_CFI_DRIVER
#endif

#ifdef CFG_FLASH_CFI_DRIVER
#define CFG_FLASH_CFI
#define CFG_FLASH_USE_BUFFER_WRITE  1
/* Use buffered writes (~10x faster) */
#define CFG_FLASH_PROTECTION        1
/* Use hardware sector protection */
/* Flash bit width */
#define CFG_FLASH_CFI_WIDTH         FLASH_CFI_32BIT
#endif /* CFG_FLASH_CFI_DRIVER */

/*
 * Stack sizes
 *
 * The stack sizes are set up in start.S using the settings below
 */
#define CONFIG_STACKSIZE        (128*1024)      /* regular stack */
#ifdef CONFIG_USE_IRQ
#define CONFIG_STACKSIZE_IRQ    (4*1024)        /* IRQ stack */
#define CONFIG_STACKSIZE_FIQ    (4*1024)        /* FIQ stack */
#endif

/*
 * Hardware drivers
 */



/*
 * UBFI params
 */

/* LINUX_LOAD_ADDR - The addr (in physical memory) that the U-Boot needs to copy the kernel to */ 
/*                   This information is store in the UBFI header.                             */ 
/*                   In Puma5 SoC We put the full (vs. an offset in RAM) so the fix is zero    */ 
#define UBFI_LINUX_LOAD_ADDR_FIX    (0) 


/*
 * MACH_TYPE - Puma5, Puma6 ...
 */
#define MACH_TYPE_PUMA5             (1147)
#define MACH_TYPE_PUMA6             (1505)


/**
 * Physical Memory Map
 */

#define CONFIG_NR_DRAM_BANKS        1      /* we have 1 bank of DRAM */
#define PHYS_SDRAM_1                (CONFIG_ARM_AVALANCHE_SDRAM_ADDRESS)   /* !@T OLDMM 0x10000000 */	  /* SDRAM Bank #1 */
#define PHYS_SDRAM_BOOT_PARAMS      (CONFIG_ARM_AVALANCHE_KERNEL_PARAMS_ADDRESS)
#define SDRAM_BASE_VIRT_NC          PHYS_SDRAM_1
#define EMIF_SDRAM_MAXSZ            (128*1024*1024)     /* 128MB */
#define EMIF_SDRAM_MAXSZ_DIV2       (EMIF_SDRAM_MAXSZ/2)
#define PHYS_SDRAM_1_SIZE           EMIF_SDRAM_MAXSZ

/* Use this for BE builds to access registers */
#define BIG_ENDIAN_OFFSET           3

#ifdef CONFIG_PUMA5_VOLCANO_EMU
#define ASCII_DISP_BASE             (0x1C4001C0+BIG_ENDIAN_OFFSET)
#define ASCII_DISP_OFFSET           8
#endif

#define PHYS_INTEL_SECT_SIZE    0x00040000  /* 128 KB sectors (x2) */


/* Currently using Flash 0 for  Env  Settings and booting*/
#ifndef CONFIG_SPI_FLASH
#define CFG_FLASH_BASE		CFG_FLASH0_BASE
#define CFG_MAX_FLASH_SECT	CFG_MAX_FLASH0_SECT
#define CFG_FLASH_SIZE		CFG_FLASH0_SIZE
#define CFG_FLASH_SECT_SIZE CFG_FLASH0_SECT_SIZE
/*
#else
#define CFG_FLASH_BASE		CFG_FLASH1_BASE
#define CFG_MAX_FLASH_SECT	CFG_MAX_FLASH1_SECT
#define CFG_FLASH_SIZE		CFG_FLASH1_SIZE
#define CFG_FLASH_SECT_SIZE CFG_FLASH1_SECT_SIZE
*/
#endif /* CONFIG_SPI_FLASH */

#define CFG_MAX_FLASH_BANKS     2    /* max num of memory banks */
/* FLASH0 Parallel Flash Info */

/* Async EMIF 0 (Parallel Flash 0 ) Region */
#define CFG_FLASH0_BASE		0x38000000  /* !@T OLDMM 0x30000000 */
#define CFG_FLASH0_SIZE         0x02000000
#define CFG_FLASH0_SECT_SIZE    PHYS_INTEL_SECT_SIZE
#define CFG_MAX_FLASH0_SECT     128         /* max num of sects on one chip */

/* FLASH1 Serial Flash Info */

/*
 * NOTE: For parallel ID is read by sending CMD to CFI flash
 * but for Srial Flash it is statically Assigned
*/

/*Serial Flash  info */
#define CFG_FLASH1_ID      	    SF_ID[ 0 ]
#define CFG_FLASH1_BASE         0x48000000  /* CS0 for Serial Flash */
#define CFG_FLASH1_SIZE         SF_SIZE[ 0 ]

#define CFG_FLASH2_ID      	    SF_ID[ 1 ]
#define CFG_FLASH2_BASE         0x4C000000  /* CS1 for Serial Flash */
#define CFG_FLASH2_SIZE         SF_SIZE[ 1 ]

#define CFG_MAX_FLASH_SECT      4096

#define CFG_FLASH_ERASE_TOUT    500000  /* Flash Erase Timeout (in us)  */
#define CFG_FLASH_WRITE_TOUT    500000  /* Flash Write Timeout (in us)  */
#define CFG_FLASH_LOCK_TOUT     500 /* Timeout for Flash Set Lock Bit (in ms) */
#define CFG_FLASH_UNLOCK_TOUT   10000   /* Timeout for Flash Clear Lock Bits (in ms) */
/*#define CFG_FLASH_PROTECTION*//* "Real" (hardware) sectors protection */

/* Memory Mapped serial flash 0 Region */
#define MM_SPI_0_PHY            0x48000000      /* !@T OLDMM (0x40000000) */
#define MM_SPI_0_SIZE           (0x04000000)

/* Memory Mapped serial flash 1 Region */
#define MM_SPI_1_PHY            0x4C000000      /* !@T OLDMM (0x44000000)*/
#define MM_SPI_1_SIZE           (0x04000000)

/* U-Boot binary size
 * - Used to start env after uboot binary in flash
 * - Note: U-Boot sector size is determined as maximum of 128KB and Flash Sector
 *   size
 */
#define CFG_UBOOTBIN_SIZE       0x1E000 /* Increase when required */
#define	CFG_MONITOR_LEN		    CFG_UBOOT_SECT_SIZE
#define CFG_MONITOR_BASE	    CFG_FLASH1_BASE

/*
 * U-Boot supports automatic calculation of UBFIADDR2 depending upong flash
 * size. To override the value of UBFIADDR2, the UBFI partition size can be
 * explicitly set here. Alternatively, explicit UBFIADDR values could also be
 * provided either in this file or by setting corresponding environment
 * variables from U-Boot prompt.
 */
#define CFG_UBFI_SIZE           0

/* Interrupt controller Region */
#define INTC_PHY                (0x50000000)
#define INTC_SIZE               (0x00100000)
#define INTC_BASE               INTC_PHY
#define REG_INTC_GLB_EN         (INTC_BASE + 0x10)
#define REG_INTC_EN_CLR0        (INTC_BASE + 0x380)
#define REG_INTC_EN_CLR1        (INTC_BASE + 0x384)
#define REG_INTC_EN_CLR2        (INTC_BASE + 0x388)

/* Volcano information Region */
#ifdef CONFIG_PUMA5_VOLCANO_EMU
#define VOLCANO_PHY		(0xFFF00000)
#define VOLCANO_SIZE	        (0x00100000)
#define VOLCANO_BASE            VOLCANO_PHY

#define AVALANCHE_ARM_CLKC_BASE		(VOLCANO_BASE + 0xF1FE4)
#define AVALANCHE_SYS_CLKC_BASE		(VOLCANO_BASE + 0xF1FE8)
#define AVALANCHE_VBUS_CLKC_BASE        (VOLCANO_BASE + 0xF1FEC)
#endif /* CONFIG_PUMA5_VOLCANO_EMU */

#define AVALANCHE_UART0_REGS_BASE       (0x08610E00+0/*BIG_ENDIAN_OFFSET*/)
#define AVALANCHE_UART1_REGS_BASE       (0x08610F00+0/*BIG_ENDIAN_OFFSET*/)

/**
 * Platform/Board specific defs
 */
#ifdef CONFIG_PUMA5_VOLCANO_EMU
#define AVALANCHE_ARM_CLKC_FREQ \
    (*(volatile unsigned int *) (AVALANCHE_ARM_CLKC_BASE))
#define AVALANCHE_SYS_CLKC_FREQ \
    (*(volatile unsigned int *) (AVALANCHE_SYS_CLKC_BASE))
#define AVALANCHE_VBUS_CLKC_FREQ \
    (*(volatile unsigned int *) (AVALANCHE_VBUS_CLKC_BASE))
#else /* !CONFIG_PUMA5_VOLCANO_EMU */
#ifdef CFG_EXTERNAL_CLK
#define AVALANCHE_ARM_CLKC_FREQ     300
#define AVALANCHE_SYS_CLKC_FREQ     (AVALANCHE_ARM_CLKC_FREQ/2)
#define AVALANCHE_VBUS_CLKC_FREQ    (AVALANCHE_SYS_CLKC_FREQ)
#else /* !CFG_EXTERNAL_CLK */
#define AVALANCHE_ARM_CLKC_FREQ                                         \
    (((*((volatile unsigned int *)REG_ARMPLL_PLLM) & 0x3F)+1) * 25)
#define AVALANCHE_SYS_CLKC_FREQ     get_sysclk_freq (0)
#define AVALANCHE_VBUS_CLKC_FREQ    get_bus_freq (0)
#endif /* !CFG_EXTERNAL_CLK */
#endif /* !CONFIG_PUMA5_VOLCANO_EMU */

/*
 * NS16550 Configuration
 */
#define CFG_NS16550
#define CFG_NS16550_SERIAL

#define CONFIG_CONS_INDEX	1
#ifdef CONFIG_PUMA5_QT_EMU
#define CONFIG_BAUDRATE		1
#else
#define CONFIG_BAUDRATE		115200
#endif

#define CFG_BAUDRATE_TABLE	{ 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 56000, 57600, 115200 }

#define CFG_NS16550_REG_SIZE	4

#ifdef CONFIG_PUMA5_VOLCANO_EMU
#define CFG_NS16550_CLK         AVALANCHE_VBUS_CLKC_FREQ
#elif defined CONFIG_PUMA5_QT_EMU
#define CFG_NS16550_CLK         16
#else
#define CFG_NS16550_CLK         AVALANCHE_VBUS_CLKC_FREQ/2
#endif

#ifdef CONFIG_PUMA5_VOLCANO_EMU
#define CFG_NS16550_COM1        AVALANCHE_UART0_REGS_BASE
#else
#define CFG_NS16550_COM1        AVALANCHE_UART1_REGS_BASE
#endif

/**
 * Environment settings
 *
 * Note: Envirnment vars are located at the end of flash. For VOLCANO builds, we
 * leave last sector for ADAM2 and 2nd last for u-boot. Also, since
 * CFG_FLASH_BASE is treated as base for total flash space, MMU settings may be
 * required if the banks are not contiguous.
 */
#if defined CONFIG_PUMA5_QT_EMU || defined CFG_NO_FLASH
#define CFG_ENV_IS_NOWHERE
#define CFG_ENV_SIZE	        (4*1024)
#else
#define CFG_ENV_IS_IN_FLASH	    1
#define CFG_ENV_ADDR            (CFG_FLASH1_BASE + CFG_UBOOT_SECT_SIZE)
#define CFG_ENV_SIZE	        CFG_FLASH_SECT_SIZE[ 0 ]
#define CFG_ENV_SECT_SIZE	    CFG_FLASH_SECT_SIZE[ 0 ]
#define CFG_ENV_ADDR_REDUND     (CFG_ENV_ADDR + CFG_ENV_SECT_SIZE)
#define CFG_ENV_SIZE_REDUND     CFG_ENV_SIZE
#endif /* !CONFIG_PUMA5_QT_EMU */

/*
 * Miscellaneous configurable options
 */
#define CFG_LONGHELP                            /* undef to save memory         */
#define CFG_PROMPT              "=> "           /* Monitor Command Prompt       */
#define CFG_CBSIZE              256             /* Console I/O Buffer Size      */
#define CFG_PBSIZE              (CFG_CBSIZE+sizeof(CFG_PROMPT)+16) /* Print Buffer Size */
#define CFG_MAXARGS             16              /* max number of command args   */
#define CFG_BARGSIZE            CFG_CBSIZE      /* Boot Argument Buffer Size    */

#define CFG_HUSH_PARSER
#define CFG_PROMPT_HUSH_PS2     ">"
#define CFG_HUSH_STATIC_MAP     /* Use static map and avoid slow getenv calls per each command */

#define CFG_MEMTEST_START       0x80100000  /* !@T OLDMM 0x10100000 */     /* memtest works on     */
#define CFG_MEMTEST_END         0x80800000  /* !@T OLDMM 0x10800000 */     /* 1 ... 8 MB in DRAM   */

#undef  CFG_CLKS_IN_HZ          /* everything, incl board info, in Hz */

#define CFG_LOAD_ADDR           0x80000100  /* !@T OLDMM 0x10010000 */     /* default load address */

#define CFG_HZ                  1000        /* 1ms clock */
#define CFG_ETH_TX_DELAY        1000        /* usecs to wait after tx */

#define XMK_STR(x)	#x
#define MK_STR(x)	XMK_STR(x)

#define CFG_RAM_RESERVE         0x800000

/********* ENV for Image updates and dual image supprt **************/

/* UBFI Partitions:
 *  Set these macros to absolute base address values if you don't want U-Boot to
 *  automatically determine (on first run only) the UBFI partition base addresses
 */
#define UBFI1_SECT_BASE         0
#define UBFI2_SECT_BASE         0

#define UBFIADDR1               UBFI1_SECT_BASE
#define UBFIADDR2               UBFI2_SECT_BASE

#define ENV_UBFIADDR1           "UBFIADDR1=" MK_STR(UBFIADDR1) "\0"
#define ENV_LOADADDR            "LOADADDR=0\0"
#define ENV_UBFINAME1           "UBFINAME1=bootImage1\0"
#define ENV_UBFIADDR2           "UBFIADDR2=" MK_STR(UBFIADDR2) "\0"
#define ENV_UBFINAME2           "UBFINAME2=bootImage2\0"
#define ENV_UBFINAME3           "UBFINAME3=bootImage3\0"
#define ENV_UBFI3RAMRESERVE     "UBFI3RAMRESERVE=" MK_STR(CFG_RAM_RESERVE) "\0"
#ifndef CFG_NO_FLASH
#define ENV_ACTIMAGE            "ACTIMAGE=1\0"
#else
#define ENV_ACTIMAGE            "ACTIMAGE=3\0"
#endif

#define ENV_UPDATE \
    "update=tftpboot " MK_STR(CFG_LOAD_ADDR) " ${imgname} && "            \
            "protect off ${imgaddr} +${filesize} && "       \
            "erase ${imgaddr} +${filesize} && "             \
            "cp.b ${fileaddr} ${imgaddr} ${filesize} && "  \
            "protect on ${imgaddr} +${filesize} && "         \
            "if itest.b ${actimg} != 0; then " \
            "setenv ACTIMAGE ${actimg} && "                                         \
            "saveenv; fi\0"

#define ENV_UPDATE_IMG1                                             \
    "update1=actimg=1 && imgaddr=${UBFIADDR1} && imgname=${UBFINAME1} && " \
    "run update\0"

#define ENV_UPDATE_IMG2                                             \
    "update2=actimg=2 && imgaddr=${UBFIADDR2} && imgname=${UBFINAME2} && " \
    "run update\0"

#define ENV_UPDATE_IMG3                                             \
    "update3=actimg=3;eval *0x80000000 - ${UBFI3RAMRESERVE};eval 0x80000000 + ${evalval};tftpboot ${evalval} ${UBFINAME3} && setenv ACTIMAGE ${actimg} && saveenv\0"

#define ENV_UPDATE_UBOOT                                            \
    "update_uboot=actimg=0 && imgaddr=" MK_STR(CFG_MONITOR_BASE) " && imgname=u-boot.bin && " \
    "run update\0"

#define ENV_ERASE                           \
        "erase_env=eval ${envpartsize} + ${envpartsize} && "    \
                "envblocksize=${evalval} && "   \
                "eval " MK_STR(CFG_FLASH1_BASE) " + ${ubootpartsize} && "   \
                "protect off ${evalval} +$envblocksize && "   \
                "erase ${evalval} +$envblocksize && "           \
                "protect on ${evalval} +$envblocksize\0"

/* Implement late init to set UBFI partitions */
#define BOARD_LATE_INIT

/*
 * Prevent tftpboot going into loop on failures. Could have used 'once' but
 * looks like the code is not working.
 */
#define ENV_CONFIG_NETRETRY_NO                                                  \
    "netretry=no\0"

/*
 * U-Boot and ENV partition sizes.
 *
 * Note :- To avoid dependency that CFG_UBOOT_SECT_SIZE and CFG_ENV_SECT_SIZE
 * must be absolute numbers (since no arithmatic evaluation will be done at env
 * setting time), ubootpartsize and envpartsize are set as 0 here to force
 * U-Boot to set them in board_late_init during first run (i.e., when using
 * default env).
 */
#if 1
#define ENV_UBOOTPARTSIZE       "ubootpartsize=0\0"
#define ENV_ENVPARTSIZE         "envpartsize=0\0"
#else
#define ENV_UBOOTPARTSIZE       "ubootpartsize=" MK_STR(CFG_UBOOT_SECT_SIZE) "\0"
#define ENV_ENVPARTSIZE         "envpartsize=" MK_STR(CFG_ENV_SECT_SIZE) "\0"
#endif

#define CONFIG_EXTRA_ENV_SETTINGS                                   \
    ENV_UBFIADDR1                                                   \
    ENV_LOADADDR                                                    \
    ENV_UBFINAME1                                                   \
    ENV_UBFIADDR2                                                   \
    ENV_UBFINAME2                                                   \
    ENV_UBFINAME3                                                   \
    ENV_ACTIMAGE                                                    \
    ENV_UPDATE                                                      \
    ENV_UPDATE_IMG1                                                 \
    ENV_UPDATE_IMG2                                                 \
    ENV_UPDATE_IMG3                                                 \
    ENV_UBFI3RAMRESERVE                                             \
    ENV_UPDATE_UBOOT                                                \
    ENV_ERASE                                                       \
    ENV_CONFIG_NETRETRY_NO                                          \
    ENV_UBOOTPARTSIZE                                               \
    ENV_ENVPARTSIZE                                                 \
    ""

/********************************************************************/

#ifndef __ASSEMBLY__
/* 64 byte read buffer - Optimized for SFI burst reads */
typedef struct {
  unsigned char buffer[64];

} sfi_read_buf_t;

#define SFI_BUF_SIZE	( sizeof( sfi_read_buf_t ) )
#endif

#endif	  /* ! __CONFIG_H */
